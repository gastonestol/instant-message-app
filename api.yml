openapi: "3.0.0"
info:
  title: instant message backend
  version: v1
  description: |
    This page describes a bare-bones REST API for a im backend.
servers:
  - url: http://localhost:8080
paths:
  /check:
    post:
      operationId: Health Check
      description: |
        Check the health of the system.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                required:
                  - health
                properties:
                  health:
                    type: string
                    enum:
                      - ok
  /users:
    post:
      operationId: Create a new User
      description: |
        Create a user in the system.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                required:
                  - id
                properties:
                  id:
                    type: integer
                    format: int64
                    description: |
                      User ID of the newly created user.
    get:
      operationId: Seach a User
      description: |
        Seach a user by username.
      security:
        - token: [ ]
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            format: int64
            description: |
              User name to search
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                required:
                  - id
                  - username
                properties:
                  id:
                    type: integer
                    format: int64
                    description: |
                      User ID of the user.
                  username:
                    type: string
                    format: int64
                    description: |
                      User name.
  /login:
    post:
      operationId: Login
      description: |
        Log in as an existing user.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                required:
                  - id
                  - token
                properties:
                  id:
                    type: integer
                    format: int64
                    description: |
                      User ID of the user who logged in.
                  token:
                    type: string
                    description: |
                      Authentication token to use for API calls on behalf of
                      this user.
  /messages:
    post:
      operationId: Send a Message
      description: |
        Send a message from one user to another. We support three types of
        messages `text`, `image` and `video` (the latter two types include
        metadata).
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - sender
                - recipient
                - content
              properties:
                sender:
                  type: integer
                  format: int64
                  description: |
                    User ID of sender.
                recipient:
                  type: integer
                  format: int64
                  description: |
                    User ID of recipient.
                content:
                  $ref: "#/components/schemas/Content"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                required:
                  - id
                  - timestamp
                properties:
                  id:
                    type: integer
                    format: int64
                    description: |
                      Unique
                  timestamp:
                    type: string
                    format: date-time
                    description: |
                      Timestamp for this message
    get:
      operationId: Get Messages
      description: |
        Fetch all existing messages to a given recipient, within a range of
        message IDs.
      security:
        - token: []
      parameters:
        - name: recipient
          in: query
          required: true
          schema:
            type: integer
            format: int64
            description: |
              User ID of recipient.
        - name: start
          in: query
          required: true
          schema:
            type: integer
            description: |
              Starting message ID. Messages will be returned in increasing
              order of message ID, starting from this value (or the next lowest
              value stored in the database).
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
            description: |
              Limit the response to this many messages.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                required:
                  - messages
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/Message"
components:
  securitySchemes:
    token:
      type: http
      description: |
        Obtain a token from the login endpoint, then pass it into the other
        endpoints as an `Authorization` header.
      in: header
      scheme: bearer
  schemas:
    Message:
      required:
        - id
        - timestamp
        - sender
        - recipient
        - content
      properties:
        id:
          type: integer
          format: int64
          description: |
            Message ID
        timestamp:
          type: string
          format: date-time
          description: |
            UTC Timestamp at which server received this message.
        sender:
          type: integer
          format: int64
          description: |
            User ID of message sender.
        recipient:
          type: integer
          format: int64
          description: |
            User ID of message recipient.
        content:
          $ref: "#/components/schemas/Content"
    Content:
      description: |
        Message content (one of three possible types).
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          text: "#/components/schemas/Text"
          image: "#/components/schemas/Image"
          video: "#/components/schemas/Video"
      oneOf:
        - $ref: "#/components/schemas/Text"
        - $ref: "#/components/schemas/Image"
        - $ref: "#/components/schemas/Video"
    Text:
      required:
        - type
        - text
      properties:
        type:
          type: string
        text:
          type: string
    Image:
      required:
        - type
        - url
        - height
        - width
      properties:
        type:
          type: string
        url:
          type: string
          format: uri
        height:
          type: integer
        width:
          type: integer
    Video:
      required:
        - type
        - url
        - source
      properties:
        type:
          type: string
        url:
          type: string
          format: uri
        source:
          type: string
          enum:
            - youtube
            - vimeo
